# Luke's lf settings

# Basic vars
set shell sh
set previewer ~/.config/lf/scope
set shellopts '-eu'
set ifs "\n"
set scrolloff 10
set icons
set sortby time
set reverse
#set info time
set ratios 1:1
# Enable icons. Requires nerd fonts and LF_ICONS variable.

# cmds/functions
cmd open ${{
    case $(gio info $f | grep "standard::content-type" | awk -F" " '{print $2}') in
      */x-puredata) xdg-open $f;;
      text/troff) man ./ $f;;
      text/*|*/json) $EDITOR $fx;;
      */javascript|*x-shellscript) $EDITOR $fx;;
      image/x-xcf|image/svg+xml) setsid $BROWSER $f >/dev/null 2>&1 & ;;
      image/*) rotdir $f | setsid sxiv -aiobN float_sc -g getGeo 2>/dev/null | lf-select & ;;
      audio/*) mpv --input-ipc-server=/tmp/mpvsoc$(date +%%s) $f ;;
      video/*) setsid mpv --input-ipc-server=/tmp/mpvsoc$(date +%%s) $f -quiet >/dev/null 2>&1 & ;;
      application/pdf) setsid zathura $fx >/dev/null 2>&1 & ;;
      *) for f in $fx; do setsid $OPENER $f >/dev/null 2>&1 & done;;
    esac
}}

# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

cmd getGeo ${{
    identify $fx | awk -F" " '{ print $3}'
}}

cmd delete ${{
  set -f
  printf "%s\n\t" "$fx"
  printf "delete?[y/N]"
  read ans
  [ $ans = "y" ] && rm -r $fx
}}

cmd trash ${{
  set -f
  printf "%s\n\t" "$fx"
  printf "move to trash?[y/N]"
  read ans
  [ $ans = "y" ] && mv $fx ~/.local/share/Trash/files
}}

cmd moveto ${{
  set -f
  clear; echo "Move to where?"
  dest="$(fd . ~ -t d | fzf)" &&
  eval mv -iv '$fx' $dest &&
  notify-send "ðŸšš File(s) moved." "File(s) moved to $dest."
}}

cmd rsyncto ${{
  set -f
  clear; echo "Copy to where?"
  dest="$(fd . ~ -t d | fzf)" &&
  eval sudo rsync -vPhua '$fx' $dest &&
  notify-send "ðŸ“‹ File(s) rsynced." "File(s) rsynced to $dest."
}}

cmd rsyncext ${{
  set -f
  clear; echo "Copy to where?"
  dest="$(fd . /mnt -t d | fzf)" &&
  eval rsync -vPhua '$fx' $dest &&
  notify-send "ðŸ“‹ File(s) sent." "File(s) sent to $dest."
}}

cmd copyto ${{
  set -f
  clear; echo "Copy to where?"
  dest="$(fd . ~ -t d | fzf)" &&
  eval cp -ivr '$fx' $dest &&
  notify-send "ðŸ“‹ File(s) copied." "File(s) copies to $dest."
}}

cmd bulkrename ${{
    VISUAL=vim
    vidir
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

#Redrawn colunas
cmd recol ${{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:1"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:2"
    else
        lf -remote "send $id set ratios 1:3:4:2"
    fi
}}

cmd copypath & {{
    readlink -fn $f | xclip -sel p -f | xclip -sel c
}}

# Bindings
map <enter> shell
map a push R<a-b><a-b><a-f> # before extention
map A push R<c-a> # at the very beginning
map b bulkrename
map C copyto
map c push R<c-u> # new rename
map J $lf -remote "send $id cd $(fd . ~ -t d | fzf)" #ir pra qlqr lugar
map D trash
map <c-e> extract
map E $$TERMA -e $EDITOR "$f" &
map <c-f> $lf -remote "send $id select '$(fzf)'" #ir para diretorio local
map <c-g> rsyncto

map gc cd ~/drive/curriculos
map gd cd ~/docs
map gf cd ~/fixo
map gh cd ~
map gm cd ~/music
map go cd ~/docs/org
map gr cd ~/drive
map gs cd ~/fixo/source
map gt cd ~/docs/txt
map gw cd ~/webdev
map zc cd ~/.config
map zm cd /mnt

map <c-c> $cat $f | xclip -selection clipboard
map i $~/.config/lf/pv.sh $f | less -R
map I $$TERMA -e sh -c '~/.config/lf/pv.sh "$f" | less -R' &
# map J $lf -remote "send $id cd $(cut -d' ' -f2- ~/.config/directories | fzf)" # ir para dir definido
map <c-j> recol
map <c-k> set ratios 1:1
map M moveto
map <c-n> push %mkdir<space>
map o &mimeopen $f
map O $mimeopen --ask $f

map R rename # at the very end
map r push R<a-b> # after extention
map <c-t> rsyncext
map V $vimdiff $fx
map <c-r> reload
# map <c-t> !mobt $fx
map <c-s> !medula $fx
map <c-S> !medula $fx
map x $$f
map X &$f
map Y copypath
map <delete> delete
